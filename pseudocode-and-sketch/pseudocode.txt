Homepage:
render heading with text "Ryan's totally real Jewelry"
render navbar with links to Store and Shopping cart

Store:
render heading with text "Store"
render shopping cart item count

StoreItem:
takes props: addToCartHandler(), itemDetails{}
add "Add to cart" button"
"Add to cart" button: use handler given through props
add "Item quantity" number input box, set "item quantity" initial value to 1
"Add to cart" button calls handler with item quantity as args

Item details:
StoreItem could take itemId and fetch() props, and call fetch using the item id, and
set an item state as the response from the API request,
or I could fetch the items from the API in the parent div, and send the item as a prop to
StoreItem

useItemDetails:
return a truthy value
return an object
return an object with "error" property
return an object with "loading" property
return an object with "data" property
isLoading should be false when all timers are ran
error should be true if URL isn't provided as an arg
data shouldn't be null
data should be an object
return object with "id", "title", "price", "description", & "imageSrc"
return an object with "id": (number), "title": (string), "price": (number),
"description": (string), "imageSrc": (string)
return an object with 'data' that has accurate properties & values
set error to true if fetch rejects
set error to true if response.status is > 400
possibly setError as the error itself instead of just a boolean variable, and directly test
the response.status from the fetch.then resolve callback
set isLoading to true after API request is made
set isLoading to false after API request is resolved